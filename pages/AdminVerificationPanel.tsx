import React, { useState, useEffect } from 'react';
import api from '../services/api-supabase';
import { supabase } from '../services/supabase';
import { PurchaseOrder } from '../types';
import { useNotification } from '../contexts/NotificationContext';
import { useAuth } from '../hooks/useAuth';
import DashboardLayout from '../components/DashboardLayout';

const AdminVerificationPanel: React.FC = () => {
    const { user } = useAuth();
    const [orders, setOrders] = useState<PurchaseOrder[]>([]);
    const [loading, setLoading] = useState(true);
    const [documentUrl, setDocumentUrl] = useState<{[key: number]: string}>({});
    const [rejectDocReason, setRejectDocReason] = useState<{[key: number]: string}>({});
    const [rejectFinalReason, setRejectFinalReason] = useState<{[key: number]: string}>({});
    const [showRejectDocForm, setShowRejectDocForm] = useState<{[key: number]: boolean}>({});
    const [showRejectFinalForm, setShowRejectFinalForm] = useState<{[key: number]: boolean}>({});
    const { showNotification } = useNotification();

    useEffect(() => {
        loadOrders();
    }, []);

    const loadOrders = async () => {
        try {
            const allOrders = await api.getPurchaseOrders('', 'admin');
            
            // ŸÜŸÖÿß€åÿ¥ ÿØŸà ÿØÿ≥ÿ™Ÿá ÿ≥ŸÅÿßÿ±ÿ¥:
            // 1. ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿØÿ± ŸÖÿ±ÿ≠ŸÑŸá ÿ™ÿß€å€åÿØ ŸÖÿØÿßÿ±⁄© (document_submitted)
            // 2. ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿØÿ± ŸÖÿ±ÿ≠ŸÑŸá ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å (verified)
            const pendingOrders = allOrders.filter((o: PurchaseOrder) => 
                o.line_type === 'active' && ['document_submitted', 'verified'].includes(o.status)
            );
            setOrders(pendingOrders);
            
            // ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ŸÖÿØÿßÿ±⁄© ÿ®ÿ±ÿß€å ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ document_submitted
            pendingOrders.forEach((order) => {
                if (order.status === 'document_submitted') {
                    console.log('Loading document for order:', order.id);
                    api.getSellerDocument(order.id)
                        .then(docUrl => {
                            console.log('Document URL for order', order.id, ':', docUrl);
                            if (docUrl) {
                                setDocumentUrl(prev => ({
                                    ...prev,
                                    [order.id]: docUrl
                                }));
                            } else {
                                console.log('No document found for order:', order.id);
                            }
                        })
                        .catch(err => console.error('Error loading document for order', order.id, ':', err));
                }
            });
        } catch (error) {
            console.error('Error loading orders:', error);
            showNotification('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™', 'error');
        } finally {
            setLoading(false);
        }
    };

    const handleApproveDocument = async (order: PurchaseOrder) => {
        try {
            // ÿ™ÿ∫€å€åÿ± Ÿàÿ∂ÿπ€åÿ™ ÿ®Ÿá verified (ŸÖŸÜÿ™ÿ∏ÿ± ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å ÿßÿØŸÖ€åŸÜ)
            await api.updatePurchaseOrderStatus(order.id, 'verified');
            
            // ÿßÿ∑ŸÑÿßÿπ ÿ®Ÿá ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá Ÿà ÿÆÿ±€åÿØÿßÿ± ⁄©Ÿá ŸÖÿØÿßÿ±⁄© ÿ™ÿß€å€åÿØ ÿ¥ÿØ
            if (user) {
                await api.sendSupportMessage(
                    order.id,
                    user.id,
                    order.seller_id,
                    '‚úÖ ŸÖÿØÿßÿ±⁄© ÿ¥ŸÖÿß ÿ™ÿß€å€åÿØ ÿ¥ÿØ Ÿà ŸÖŸÜÿ™ÿ∏ÿ± ÿ™ŸÖÿßÿ≥ ⁄©ÿßÿ±ÿ¥ŸÜÿßÿ≥ Ÿáÿ≥ÿ™€åÿØ',
                    'response'
                );
            }
            
            showNotification('‚úÖ ŸÖÿØÿßÿ±⁄© ÿ™ÿß€å€åÿØ ÿ¥ÿØ', 'success');
            loadOrders();
        } catch (error: any) {
            console.error('Approve document error:', error);
            showNotification(`ÿÆÿ∑ÿß: ${error.message || 'ÿÆÿ∑ÿß€å ŸÜÿßŸÖÿ¥ÿÆÿµ'}`, 'error');
        }
    };

    const handleRejectDocument = async (orderId: number) => {
        const reason = rejectDocReason[orderId];
        if (!reason.trim()) {
            showNotification('ŸÑÿ∑ŸÅÿß ÿØŸÑ€åŸÑ ÿ±ÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ', 'error');
            return;
        }
        
        try {
            // ÿ™ÿ∫€å€åÿ± Ÿàÿ∂ÿπ€åÿ™ ÿ®Ÿá document_rejected
            await api.updatePurchaseOrderStatus(orderId, 'document_rejected');
            
            // ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá
            const order = orders.find(o => o.id === orderId);
            if (order && user) {
                await api.sendSupportMessage(
                    orderId,
                    user.id,
                    order.seller_id,
                    `‚ö†Ô∏è ŸÖÿØÿßÿ±⁄© ÿ¥ŸÖÿß ÿ±ÿØ ÿ¥ÿØŸá ÿßÿ≥ÿ™. ÿØŸÑ€åŸÑ: ${reason}`,
                    'response'
                );
            }
            
            showNotification('‚ö†Ô∏è ŸÖÿØÿßÿ±⁄© ÿ±ÿØ ÿ¥ÿØŸÜÿØ', 'success');
            loadOrders();
        } catch (error: any) {
            console.error('Reject document error:', error);
            showNotification(`ÿÆÿ∑ÿß: ${error.message || 'ÿÆÿ∑ÿß€å ŸÜÿßŸÖÿ¥ÿÆÿµ'}`, 'error');
        }
    };

    const handleApproveFinal = async (order: PurchaseOrder) => {
        try {
            console.log('Final approving order:', order.id);
            
            // ÿ™ÿ∫€å€åÿ± Ÿàÿ∂ÿπ€åÿ™ ÿ®Ÿá completed Ÿà Ÿàÿßÿ±€åÿ≤ ŸæŸàŸÑ
            await api.updatePurchaseOrderStatus(order.id, 'completed');
            
            if (user) {
                console.log('Calling approvePurchase with:', { orderId: order.id, adminId: user.id });
                await api.approvePurchase(order.id, user.id);
            }
            
            // ÿßÿ∑ŸÑÿßÿπ ÿ®Ÿá Ÿáÿ± ÿØŸà ÿ∑ÿ±ŸÅ
            if (user) {
                await api.sendSupportMessage(
                    order.id,
                    user.id,
                    order.buyer_id,
                    '‚úÖ ŸÖÿπÿßŸÖŸÑŸá ÿ¥ŸÖÿß ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ Ÿà ŸæŸàŸÑ ÿ®Ÿá ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ŸÖŸÜÿ™ŸÇŸÑ ÿ¥ÿØ',
                    'response'
                );
                
                await api.sendSupportMessage(
                    order.id,
                    user.id,
                    order.seller_id,
                    'üí∞ ŸÖÿπÿßŸÖŸÑŸá ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ Ÿà ŸæŸàŸÑ ÿ®Ÿá ÿ≠ÿ≥ÿßÿ® ÿ¥ŸÖÿß Ÿàÿßÿ±€åÿ≤ ÿ¥ÿØ',
                    'response'
                );
            }
            
            showNotification('‚úÖ ŸÖÿπÿßŸÖŸÑŸá ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ Ÿà ŸæŸàŸÑ Ÿàÿßÿ±€åÿ≤ ÿ¥ÿØ', 'success');
            loadOrders();
        } catch (error: any) {
            console.error('Approve final error:', error);
            showNotification(`ÿÆÿ∑ÿß: ${error.message || 'ÿÆÿ∑ÿß€å ŸÜÿßŸÖÿ¥ÿÆÿµ'}`, 'error');
        }
    };

    const handleRejectFinal = async (orderId: number) => {
        const reason = rejectFinalReason[orderId];
        if (!reason.trim()) {
            showNotification('ŸÑÿ∑ŸÅÿß ÿØŸÑ€åŸÑ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ', 'error');
            return;
        }
        
        try {
            // Update purchase order status
            await api.updatePurchaseOrderStatus(orderId, 'cancelled');
            
            // ÿ®ÿßÿ≤⁄Øÿ±ÿØÿßŸÜÿØŸÜ ŸæŸàŸÑ ÿÆÿ±€åÿØÿßÿ±
            const order = orders.find(o => o.id === orderId);
            if (order && user) {
                console.log('Refunding buyer for order:', orderId);
                
                const { data: buyerData, error: buyerError } = await supabase
                    .from('users')
                    .select('blocked_balance, wallet_balance')
                    .eq('id', order.buyer_id)
                    .single();
                
                if (buyerError) {
                    console.error('Error fetching buyer:', buyerError);
                    throw new Error(buyerError.message);
                }
                
                console.log('Buyer data:', buyerData);
                
                if (buyerData) {
                    const refundAmount = order.buyer_blocked_amount;
                    const newBlocked = (buyerData.blocked_balance || 0) - refundAmount;
                    const newWallet = (buyerData.wallet_balance || 0) + refundAmount;
                    
                    console.log('Updating buyer balance:', { 
                        blocked: newBlocked, 
                        wallet: newWallet,
                        refund: refundAmount
                    });
                    
                    const { error: updateError } = await supabase
                        .from('users')
                        .update({ 
                            wallet_balance: newWallet,
                            blocked_balance: newBlocked
                        })
                        .eq('id', order.buyer_id);
                    
                    if (updateError) {
                        console.error('Error updating buyer balance:', updateError);
                        throw new Error(updateError.message);
                    }
                }
                
                // Update SIM card status to available (refund)
                const { error: simError } = await supabase
                    .from('sim_cards')
                    .update({ 
                        status: 'available',
                        sold_date: null
                    })
                    .eq('id', order.sim_card_id);
                
                if (simError) {
                    console.error('‚ùå Error updating SIM card status:', simError);
                    throw new Error(simError.message);
                }
                
                await api.sendSupportMessage(
                    orderId,
                    user.id,
                    order.seller_id,
                    `‚ùå ŸÖÿπÿßŸÖŸÑŸá ŸÑÿ∫Ÿà ÿ¥ÿØ. ÿØŸÑ€åŸÑ: ${reason}`,
                    'response'
                );
            }
            
            showNotification('‚ùå ŸÖÿπÿßŸÖŸÑŸá ŸÑÿ∫Ÿà ÿ¥ÿØ Ÿà ŸæŸàŸÑ ÿ®ÿßÿ≤⁄Øÿ±ÿØÿßŸÜÿØŸá ÿ¥ÿØ', 'success');
            loadOrders();
        } catch (error: any) {
            console.error('Reject final error:', error);
            showNotification(`ÿÆÿ∑ÿß: ${error.message || 'ÿÆÿ∑ÿß€å ŸÜÿßŸÖÿ¥ÿÆÿµ'}`, 'error');
        }
    };

    if (loading) {
        return (
            <DashboardLayout>
                <div className="text-center py-8">ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å...</div>
            </DashboardLayout>
        );
    }

    return (
        <DashboardLayout>
            <div className="max-w-5xl mx-auto">
                <h2 className="text-3xl font-bold mb-6 text-gray-900 dark:text-white">üìÑ ÿ™ÿß€å€åÿØ ÿßÿ≥ŸÜÿßÿØ ŸÅÿ±Ÿàÿ¥ŸÜÿØ⁄ØÿßŸÜ</h2>
                
                {orders.length === 0 ? (
                    <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 text-center">
                        <p className="text-gray-500">ÿ≥ŸÜÿØ€å ÿ®ÿ±ÿß€å ÿ™ÿß€å€åÿØ Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ</p>
                    </div>
                ) : (
                    <div className="space-y-6">
                        {orders.map(order => (
                            <div key={order.id} className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                                <div className="flex justify-between items-start mb-4">
                                    <div>
                                        <h3 className="text-xl font-bold">ÿ≥ŸÅÿßÿ±ÿ¥ #{order.id}</h3>
                                        <p className="text-gray-600 dark:text-gray-400 text-sm mt-1">
                                            üì± ÿ¥ŸÖÿßÿ±Ÿá ÿÆÿ∑: <span style={{ direction: 'ltr' }} className="font-bold">{(order as any).sim_number || order.sim_card_id}</span>
                                        </p>
                                        <p className="text-gray-600 dark:text-gray-400 text-xs mt-1">
                                            {order.status === 'document_submitted' && 'üìã ŸÖÿ±ÿ≠ŸÑŸá 1: ÿ™ÿß€å€åÿØ ŸÖÿØÿßÿ±⁄©'}
                                            {order.status === 'verified' && '‚òéÔ∏è ŸÖÿ±ÿ≠ŸÑŸá 2: ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å Ÿà ÿßŸÜÿ™ŸÇÿßŸÑ ŸæŸàŸÑ'}
                                        </p>
                                    </div>
                                    <span className="px-3 py-1 rounded-full text-sm font-medium bg-orange-100 text-orange-800">
                                        ‚è≥ ÿØÿ± ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ™ÿß€å€åÿØ
                                    </span>
                                </div>

                                <div className="grid grid-cols-2 gap-4 mb-4 p-4 bg-gray-50 dark:bg-gray-700 rounded">
                                    <div>
                                        <p className="text-sm text-gray-600 dark:text-gray-400">ŸÇ€åŸÖÿ™</p>
                                        <p className="font-bold">{order.price.toLocaleString('fa-IR')} ÿ™ŸàŸÖÿßŸÜ</p>
                                    </div>
                                    <div>
                                        <p className="text-sm text-gray-600 dark:text-gray-400">ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ÿØÿ±€åÿßŸÅÿ™ ÿÆŸàÿßŸáÿØ ⁄©ÿ±ÿØ</p>
                                        <p className="font-bold text-green-600">{order.seller_received_amount.toLocaleString('fa-IR')} ÿ™ŸàŸÖÿßŸÜ</p>
                                    </div>
                                </div>

                                {/* ŸÖÿ±ÿ≠ŸÑŸá 1: ÿ™ÿß€å€åÿØ ŸÖÿØÿßÿ±⁄© */}
                                {order.status === 'document_submitted' && (
                                    <div className="border-t pt-4 mt-4">
                                        <h5 className="font-semibold mb-3">üìÑ ŸÖÿØÿ±⁄© ÿØÿ≥ÿ™ŸÜŸà€åÿ≥:</h5>
                                        {documentUrl[order.id] ? (
                                            <div className="space-y-4">
                                                <div className="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-700">
                                                    <img 
                                                        src={documentUrl[order.id]} 
                                                        alt="Document" 
                                                        className="w-full max-h-96 object-contain rounded-lg"
                                                        onError={(e) => {
                                                            console.error('Image load error for order', order.id, ':', e);
                                                            (e.target as HTMLImageElement).src = 'https://via.placeholder.com/400x300?text=Document+Not+Found';
                                                        }}
                                                    />
                                                </div>
                                                <div className="flex flex-wrap gap-2">
                                                    <a 
                                                        href={documentUrl[order.id]} 
                                                        target="_blank" 
                                                        rel="noopener noreferrer"
                                                        className="inline-flex items-center bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm"
                                                    >
                                                        üîó ŸÖÿ¥ÿßŸáÿØŸá ÿØÿ± ŸæŸÜÿ¨ÿ±Ÿá ÿ¨ÿØ€åÿØ
                                                    </a>
                                                    <button
                                                        onClick={() => {
                                                            navigator.clipboard.writeText(documentUrl[order.id]);
                                                            showNotification('ÿ¢ÿØÿ±ÿ≥ ŸÅÿß€åŸÑ ⁄©Ÿæ€å ÿ¥ÿØ', 'success');
                                                        }}
                                                        className="inline-flex items-center bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 text-sm"
                                                    >
                                                        üìã ⁄©Ÿæ€å ŸÑ€åŸÜ⁄©
                                                    </button>
                                                </div>
                                            </div>
                                        ) : (
                                            <div className="text-center py-4">
                                                <div className="inline-block animate-spin rounded-full h-10 w-10 border-b-2 border-blue-600 mb-3"></div>
                                                <p className="text-sm text-gray-500 mt-3">ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ŸÖÿØÿ±⁄©...</p>
                                            </div>
                                        )}

                                        {/* ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿ™ÿß€å€åÿØ ŸÖÿØÿßÿ±⁄© */}
                                        <div className="border-t pt-4 mt-4 space-y-3">
                                            <div className="grid grid-cols-2 gap-3">
                                                <button
                                                    onClick={() => handleApproveDocument(order)}
                                                    className="bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 font-semibold transition"
                                                >
                                                    ‚úÖ ÿ™ÿß€å€åÿØ ŸÖÿØÿßÿ±⁄©
                                                </button>
                                                <button
                                                    onClick={() => setShowRejectDocForm(prev => ({...prev, [order.id]: !prev[order.id]}))}
                                                    className="bg-red-600 text-white px-4 py-3 rounded-lg hover:bg-red-700 font-semibold transition"
                                                >
                                                    ‚ùå ÿ±ÿØ ŸÖÿØÿßÿ±⁄©
                                                </button>
                                            </div>

                                            {/* ŸÅÿ±ŸÖ ÿ±ÿØ ŸÖÿØÿßÿ±⁄© */}
                                            {showRejectDocForm[order.id] && (
                                                <div className="bg-red-50 dark:bg-red-900/30 p-4 rounded-lg space-y-3">
                                                    <p className="text-sm font-semibold text-red-700 dark:text-red-300">
                                                        ÿØŸÑ€åŸÑ ÿ±ÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:
                                                    </p>
                                                    <textarea
                                                        placeholder="ŸÖÿ´ÿßŸÑ: ŸÖÿØÿ±⁄© ŸÜÿßŸÖÿ¥ÿÆÿµ ÿßÿ≥ÿ™ÿå ÿßŸÖÿ∂ÿß ŸÜÿØÿßÿ±ÿØÿå ÿ™ÿßÿ±€åÿÆ ⁄Øÿ∞ÿ¥ÿ™Ÿá ÿßÿ≥ÿ™..."
                                                        value={rejectDocReason[order.id] || ''}
                                                        onChange={(e) => setRejectDocReason(prev => ({...prev, [order.id]: e.target.value}))}
                                                        className="w-full px-3 py-2 border border-red-300 rounded-lg dark:bg-gray-700 dark:border-red-600"
                                                        rows={3}
                                                    />
                                                    <div className="flex gap-2">
                                                        <button
                                                            onClick={() => {
                                                                handleRejectDocument(order.id);
                                                                setShowRejectDocForm(prev => ({...prev, [order.id]: false}));
                                                            }}
                                                            className="flex-1 bg-red-600 text-white py-2 rounded-lg hover:bg-red-700 font-semibold"
                                                        >
                                                            ‚úì ÿ™ÿß€å€åÿØ ÿ±ÿØ
                                                        </button>
                                                        <button
                                                            onClick={() => setShowRejectDocForm(prev => ({...prev, [order.id]: false}))}
                                                            className="flex-1 bg-gray-400 text-white py-2 rounded-lg hover:bg-gray-500 font-semibold"
                                                        >
                                                            ÿßŸÜÿµÿ±ÿßŸÅ
                                                        </button>
                                                    </div>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}

                                {/* ŸÖÿ±ÿ≠ŸÑŸá 2: ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å Ÿà ÿßŸÜÿ™ŸÇÿßŸÑ ŸæŸàŸÑ */}
                                {order.status === 'verified' && (
                                    <div className="border-t pt-4 mt-4 bg-blue-50 dark:bg-blue-900/30 p-4 rounded-lg space-y-3">
                                        <h5 className="font-semibold">‚òéÔ∏è ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å - ÿßŸÜÿ™ŸÇÿßŸÑ ŸæŸàŸÑ</h5>
                                        <p className="text-sm text-gray-700 dark:text-gray-300">
                                            ŸÖÿØÿßÿ±⁄© ÿ™ÿß€å€åÿØ ÿ¥ÿØ. ÿß⁄©ŸÜŸàŸÜ ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ŸÖÿπÿßŸÖŸÑŸá ÿ±ÿß ŸÜŸáÿß€å€å ⁄©ŸÜ€åÿØ Ÿà ŸæŸàŸÑ ÿ±ÿß ÿ®Ÿá ŸÅÿ±Ÿàÿ¥ŸÜÿØŸá ŸÖŸÜÿ™ŸÇŸÑ ⁄©ŸÜ€åÿØ.
                                        </p>
                                        
                                        <div className="grid grid-cols-2 gap-3">
                                            <button
                                                onClick={() => handleApproveFinal(order)}
                                                className="bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 font-semibold transition"
                                            >
                                                ‚úÖ ÿ™ÿß€å€åÿØ ŸÜŸáÿß€å€å Ÿà Ÿàÿßÿ±€åÿ≤
                                            </button>
                                            <button
                                                onClick={() => setShowRejectFinalForm(prev => ({...prev, [order.id]: !prev[order.id]}))}
                                                className="bg-red-600 text-white px-4 py-3 rounded-lg hover:bg-red-700 font-semibold transition"
                                            >
                                                ‚ùå ŸÑÿ∫Ÿà ŸÖÿπÿßŸÖŸÑŸá
                                            </button>
                                        </div>

                                        {/* ŸÅÿ±ŸÖ ŸÑÿ∫Ÿà ŸÖÿπÿßŸÖŸÑŸá */}
                                        {showRejectFinalForm[order.id] && (
                                            <div className="bg-red-50 dark:bg-red-900/30 p-4 rounded-lg space-y-3">
                                                <p className="text-sm font-semibold text-red-700 dark:text-red-300">
                                                    ÿØŸÑ€åŸÑ ŸÑÿ∫Ÿà ŸÖÿπÿßŸÖŸÑŸá:
                                                </p>
                                                <textarea
                                                    placeholder="ÿØŸÑ€åŸÑ ŸÑÿ∫Ÿà ŸÖÿπÿßŸÖŸÑŸá ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ..."
                                                    value={rejectFinalReason[order.id] || ''}
                                                    onChange={(e) => setRejectFinalReason(prev => ({...prev, [order.id]: e.target.value}))}
                                                    className="w-full px-3 py-2 border border-red-300 rounded-lg dark:bg-gray-700 dark:border-red-600"
                                                    rows={3}
                                                />
                                                <div className="flex gap-2">
                                                    <button
                                                        onClick={() => {
                                                            handleRejectFinal(order.id);
                                                            setShowRejectFinalForm(prev => ({...prev, [order.id]: false}));
                                                        }}
                                                        className="flex-1 bg-red-600 text-white py-2 rounded-lg hover:bg-red-700 font-semibold"
                                                    >
                                                        ‚úì ŸÑÿ∫Ÿà ŸÖÿπÿßŸÖŸÑŸá
                                                    </button>
                                                    <button
                                                        onClick={() => setShowRejectFinalForm(prev => ({...prev, [order.id]: false}))}
                                                        className="flex-1 bg-gray-400 text-white py-2 rounded-lg hover:bg-gray-500 font-semibold"
                                                    >
                                                        ÿßŸÜÿµÿ±ÿßŸÅ
                                                    </button>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </DashboardLayout>
    );
};

export default AdminVerificationPanel;
